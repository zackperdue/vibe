# Test for functions without parentheses and without return types

# Define a function without parentheses and without a return type
def simple_logger do
  puts "Log entry: Function called"
end

# Define a function that takes no parameters, has no return type, and calls another function
def nested_logger do
  puts "Starting nested logging..."
  simple_logger
  puts "Nested logging completed"
end

# Define a function that calls multiple no-param functions
def multi_logger do
  puts "Multiple logging sequence:"
  simple_logger
  nested_logger
  puts "Multiple logging complete"
end

# Define a function that combines different styles for comparison
def combined_logger: int do
  puts "Combined logger:"
  # Call a function without parens and without return type
  simple_logger
  # Call another function that does the same
  nested_logger
  return 42
end

# Main function to run all tests
def main: int do
  puts "=== Testing functions without parentheses and without return types ==="

  # Call directly without parentheses
  puts "\nCalling simple_logger:"
  simple_logger

  # Call nested logger without parentheses
  puts "\nCalling nested_logger:"
  nested_logger

  # Call multi logger without parentheses
  puts "\nCalling multi_logger:"
  multi_logger

  # Call combined logger and capture return value
  puts "\nCalling combined_logger:"
  result = combined_logger
  puts "Result from combined_logger: " + result

  # Verify traditional style also works for all functions
  puts "\nVerifying traditional style with parentheses:"
  simple_logger()
  nested_logger()
  multi_logger()
  result = combined_logger()
  puts "Result from combined_logger(): " + result

  puts "\n=== All tests completed successfully ==="
  return 0
end

# Run the tests
main